// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Platform {
  KAKAO
  GOOGLE
  NAVER
}

enum WeightUnit {
  G
  KG
}

enum Gender {
  MALE
  FEMALE
  LESS
}

model User {
  id String @id @default(uuid())
  identifier String @unique
  nickname String @db.VarChar(15) @unique
  avatarUrl String? @map("avatar_url") // TODO default 이미지
  platform Platform
  introduction String?
  deleted DateTime?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cages Cage[]
  individual Individual[]

  @@map("user")
}

model Individual {
  id String @id @default(uuid())
  name String @db.VarChar(15)
  avatarUrl String @map("avatar_url") // TODO default 이미지
  weight Float
  weightUnit WeightUnit @map("weight_unit")
  memo String? @db.VarChar(50)
  gender Gender
  deleted DateTime?
  hatchedAt DateTime @map("hatched_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  individualImage IndividualImage[]
  plans Plan[]
  user User @relation(fields: [userId], references: [id])
  userId String
  species Species @relation(fields: [speciesId], references: [id])
  speciesId String
  cage Cage? @relation(fields: [cageId], references: [id])
  cageId String?

  @@map("individual")
}

model IndividualImage {
  id String @id @default(uuid())
  url String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  individual Individual @relation(fields: [individualId], references: [id])
  individualId String

  @@map("individual_image")
}

model Species {
  id String @id @default(uuid())
  name String @db.Char(20) @unique
  minTemperature Float @map("min_temperature")
  maxTemperature Float @map("max_temperature")
  minHumidity Float @map("min_humidity")
  maxHumidity Float @map("max_humidity")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  individuals Individual[]

  @@map("species")
}

model Plan {
  id String @id @default(uuid())
  targetDatetime DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  planCategory PlanCategory @relation(fields: [planCategoryId], references: [id])
  planCategoryId String
  individual Individual @relation(fields: [individualId], references: [id])
  individualId String

  @@map("plan")
}

model PlanCategory {
  id String @id @default(uuid())
  name String @db.Char(15)
  colorHex String @db.Char(7)
  createdAt DateTime @default(now()) @map("created_at")

  plans Plan[]

  @@map("plan_category")
}

model Cage {
  id String @id
  name String @db.Char(15)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  userId String
  individuals Individual[]
  cageStates CageState[]

  @@map("cage")
}

model CageState {
  id String @id @default(uuid())
  temperature Float
  humidity Float
  createdAt DateTime @default(now()) @map("created_at")

  cage Cage @relation(fields: [cageId], references: [id])
  cageId String

  @@map("cage_state")
}